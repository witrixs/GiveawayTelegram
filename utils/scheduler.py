import asyncio
import logging
import random
from datetime import datetime
from typing import Optional

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
import pytz

from database.database import get_active_giveaways, finish_giveaway, get_participants, delete_finished_older_than
from texts.messages import WINNER_ANNOUNCEMENT_TEMPLATE, NO_PARTICIPANTS_TEMPLATE
from utils.datetime_utils import format_datetime

scheduler = AsyncIOScheduler()


async def setup_scheduler(bot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    scheduler.start()
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏
    active_giveaways = await get_active_giveaways()
    for giveaway in active_giveaways:
        if giveaway.end_time > datetime.utcnow():
            schedule_giveaway_finish(bot, giveaway.id, giveaway.end_time)
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–≤—Ç–æ-–æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ä—à–µ 15 –¥–Ω–µ–π (—Ç–æ–ª—å–∫–æ –∏–∑ –±–∞–∑—ã)
    try:
        scheduler.add_job(
            cleanup_old_finished,
            "interval",
            days=1,
            id="cleanup_finished",
            name="–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π —Å—Ç–∞—Ä—à–µ 15 –¥–Ω–µ–π",
            args=[15]
        )
    except Exception:
        pass
    
    logging.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {len(active_giveaways)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π")


def schedule_giveaway_finish(bot, giveaway_id: int, end_time: datetime):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    job_id = f"finish_giveaway_{giveaway_id}"
    
    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –µ—Å—Ç—å
    if scheduler.get_job(job_id):
        scheduler.remove_job(job_id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    scheduler.add_job(
        finish_giveaway_task,
        DateTrigger(run_date=end_time),
        args=[bot, giveaway_id],
        id=job_id,
        name=f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ #{giveaway_id}"
    )
    
    logging.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ #{giveaway_id} –Ω–∞ {format_datetime(end_time)}")


def cancel_giveaway_schedule(giveaway_id: int):
    """–û—Ç–º–µ–Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    job_id = f"finish_giveaway_{giveaway_id}"
    if scheduler.get_job(job_id):
        scheduler.remove_job(job_id)
        logging.info(f"–û—Ç–º–µ–Ω–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ #{giveaway_id}")


async def finish_giveaway_task(bot, giveaway_id: int):
    """–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    try:
        from database.database import get_giveaway
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        giveaway = await get_giveaway(giveaway_id)
        if not giveaway or giveaway.status != "active":
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants = await get_participants(giveaway_id)
        
        if not participants:
            # –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            await finish_giveaway(giveaway_id)
            
            no_participants_message = "üéä <b>–†–û–ó–´–ì–†–´–® –ó–ê–í–ï–†–®–ï–ù!</b>\n\nüòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –Ω–µ –±—ã–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
            
            try:
                await bot.send_message(
                    chat_id=giveaway.channel_id,
                    text=no_participants_message,
                    parse_mode="HTML",
                    reply_to_message_id=giveaway.message_id if giveaway.message_id else None
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –±–µ–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        winner_places = giveaway.winner_places
        if len(participants) < winner_places:
            winner_places = len(participants)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        winners = random.sample(participants, winner_places)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        winners_data = []
        winners_list = []
        
        for i, winner in enumerate(winners, 1):
            winner_name = winner.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            if winner.username:
                winner_name = f"@{winner.username}"
            
            # –ï—Å–ª–∏ –æ–¥–∏–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å ‚Äî –ø–∏—à–µ–º –ø—Ä–æ—Å—Ç–æ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å
            if winner_places == 1:
                winners_list.append(f"üèÜ <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:</b> {winner_name}")
            else:
                place_emoji = {1: "ü•á", 2: "ü•à", 3: "ü•â"}.get(i, f"{i}Ô∏è‚É£")
                winners_list.append(f"{place_emoji} <b>{i} –º–µ—Å—Ç–æ:</b> {winner_name}")
            
            winners_data.append({
                "user_id": winner.user_id,
                "username": winner.username,
                "first_name": winner.first_name,
                "place": i
            })
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await finish_giveaway(giveaway_id=giveaway_id, winners_data=winners_data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è—Ö
        winner_message = (
            "üéä <b>–†–û–ó–´–ì–†–´–® –ó–ê–í–ï–†–®–ï–ù!</b>\n\n" + "\n".join(winners_list) + "\n\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–æ—Ç–≤–µ—Ç –≤ –∫–∞–Ω–∞–ª –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Å—Ç
        try:
            await bot.send_message(
                chat_id=giveaway.channel_id,
                text=winner_message,
                parse_mode="HTML",
                reply_to_message_id=giveaway.message_id if giveaway.message_id else None
            )
            
            # –ù–µ —É–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
            logging.info(f"–†–æ–∑—ã–≥—Ä—ã—à #{giveaway_id} –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Ç–æ–≥–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Å—Ç.")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ: {e}")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ #{giveaway_id}: {e}")


async def cleanup_old_finished(days: int):
    try:
        deleted = await delete_finished_older_than(days)
        if deleted:
            logging.info(f"–û—á–∏—â–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: {deleted} (—Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π)")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: {e}")


def get_scheduler_status() -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    jobs = scheduler.get_jobs()
    return {
        "running": scheduler.running,
        "jobs_count": len(jobs),
        "jobs": [
            {
                "id": job.id,
                "name": job.name,
                "next_run_time": job.next_run_time
            }
            for job in jobs
        ]
    }
